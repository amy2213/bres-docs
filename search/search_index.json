{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Binary Ritual Encoding System (BRES)","text":"<p>Welcome to the official documentation for the BRES framework. This site provides technical and interpretive insights into decoding symbolic ritual artifacts.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>The BRES system is built on a modular architecture designed to support symbolic ritual classification across multiple domains.</p>"},{"location":"architecture/#core-modules","title":"Core Modules","text":"<ul> <li>Phase Assignment Engine: Converts glyphs to ritual phase tokens (P, T, A, N).</li> <li>Motif Analyzer: Scans for repeated and statistically significant phase patterns.</li> <li>Artifact Classifier: Determines whether an object is a Ritual Calendar, Astronomical Register, etc.</li> <li>Script Generator: Builds interpretive ritual timelines or ceremonial scripts.</li> </ul>"},{"location":"architecture/#expansion-layers","title":"Expansion Layers","text":"<ul> <li>Cultural Ontology Map</li> <li>Probabilistic Phase Support</li> <li>Cross-artifact similarity scoring</li> </ul> <p>Each module operates independently but integrates through a shared metadata pipeline.</p>"},{"location":"classification/","title":"Classification","text":""},{"location":"classification/#classification-pipeline","title":"Classification Pipeline","text":"<p>A <code>DecisionTreeClassifier</code> (scikit-learn) assigns: - Primary Type:   - A: Ritual Calendar   - B: Invocation Litany   - C: Astronomical Register   - D: Divinatory Cosmogram</p> <ul> <li>Subtype Cluster:</li> <li>A1: Agricultural Calendar</li> <li>A2: Sacrificial Wheel</li> <li>C1: Venus Track (Dresden Codex)</li> <li>C2: Eclipse Counter</li> <li>etc.</li> </ul>"},{"location":"classification/#training-data","title":"Training Data:","text":"<ul> <li>Verified: Phaistos Disc, Venus Table (Dresden Codex)</li> <li>Synthetic: 20 examples per type, using motif and entropy rules</li> <li>All labeled with clear provenance (real vs. synthetic)</li> </ul>"},{"location":"developer_guide/","title":"Developer Implementation Guide","text":""},{"location":"developer_guide/#developer-implementation-guide-bres-binary-ritual-encoding-system","title":"Developer Implementation Guide \u2013 BRES (Binary Ritual Encoding System)","text":""},{"location":"developer_guide/#overview","title":"Overview","text":"<p>This document describes how to implement the BRES system, including data ingestion, phase assignment, feature extraction, classification, and interpretive outputs. The goal is to help developers rebuild or extend BRES as a symbolic classifier and interpreter for ritual artifacts.</p>"},{"location":"developer_guide/#project-structure","title":"Project Structure","text":"<pre><code>bres/\n\u251c\u2500\u2500 data/                  # Artifact glyph sequences (real + synthetic)\n\u251c\u2500\u2500 features/              # Feature extraction scripts\n\u251c\u2500\u2500 model/                 # Classifier training and subtype clustering\n\u251c\u2500\u2500 interpret/             # Ritual logic, segmentation, narratives\n\u251c\u2500\u2500 output/                # Markdown or PDF exports\n\u2514\u2500\u2500 interface/             # CLI or Web interface (optional)\n</code></pre>"},{"location":"developer_guide/#phase-assignment","title":"Phase Assignment","text":""},{"location":"developer_guide/#file-phase_mappy","title":"File: <code>phase_map.py</code>","text":"<ul> <li>Maps each <code>Glyph ID</code> to a BRES Phase (A, T, P, N)</li> <li>Supports:</li> <li>Fixed map: <code>id_to_phase = {1: 'A', 2: 'T', ...}</code></li> <li>Probabilistic map:     <code>python     phase_probs = {       1: {\"A\": 0.8, \"T\": 0.2},       4: {\"T\": 0.9, \"N\": 0.1}     }</code></li> </ul>"},{"location":"developer_guide/#feature-extraction","title":"Feature Extraction","text":""},{"location":"developer_guide/#file-featuresextract_bres_featurespy","title":"File: <code>features/extract_bres_features.py</code>","text":"<p>Main method:</p> <pre><code>def extract_bres_features(seq: str) -&gt; dict:\n</code></pre> <p>Outputs: - Phase counts, transition matrix - Entropy (Shannon) - Motif frequencies (PTAN, ATAAN, etc.) - Spatial tags (if provided) - Used for both training and classification</p>"},{"location":"developer_guide/#classifier-training","title":"Classifier Training","text":""},{"location":"developer_guide/#file-modeltrain_classifierpy","title":"File: <code>model/train_classifier.py</code>","text":"<ul> <li>Uses <code>sklearn.tree.DecisionTreeClassifier</code>:   <code>python   clf = DecisionTreeClassifier(max_depth=4)   clf.fit(X_train, y_train)</code></li> <li>Outputs <code>Type</code>: A, B, C, D</li> </ul>"},{"location":"developer_guide/#subtype-clustering","title":"Subtype Clustering:","text":"<ul> <li>KMeans clustering of normalized feature space</li> <li>2\u20133 subtypes per type (manual labeling)</li> </ul>"},{"location":"developer_guide/#interpretation-pipeline","title":"Interpretation Pipeline","text":""},{"location":"developer_guide/#file-interpretgenerate_narrativepy","title":"File: <code>interpret/generate_narrative.py</code>","text":"<p>Steps after classification: 1. Segment phase stream by closure or motifs 2. Theme assignment by segment profile 3. Narrative generation using cultural ontology 4. Optional: Generate spiral/radial timeline charts</p>"},{"location":"developer_guide/#spatial-mapping-optional","title":"Spatial Mapping (Optional)","text":""},{"location":"developer_guide/#file-featuresspatial_taggingpy","title":"File: <code>features/spatial_tagging.py</code>","text":"<ul> <li>Tracks glyph index in:</li> <li>Sector</li> <li>Spiral or radial layout</li> <li>Bins glyphs into bands (e.g., \u201cOuter\u201d, \u201cCenter\u201d)</li> <li>Used to analyze closure clustering or phase flow by depth</li> </ul>"},{"location":"developer_guide/#tools-libraries","title":"Tools &amp; Libraries","text":"<ul> <li><code>pandas</code>, <code>numpy</code>: Data processing</li> <li><code>scikit-learn</code>: Classifier + clustering</li> <li><code>matplotlib</code>: Visualization</li> <li><code>markdown2</code>, <code>pdfkit</code> (optional): Export formatting</li> <li><code>streamlit</code> or <code>click</code>: Web/CLI interface</li> </ul>"},{"location":"developer_guide/#cliweb-integration","title":"CLI/Web Integration","text":"<p>Optional front-end with:</p> <pre><code>$ bres analyze glyph_sequence.txt\n$ bres interpret --artifact phaistos_disc\n$ bres export --format pdf\n</code></pre> <p>Or use a <code>Streamlit</code> dashboard for upload + export + visualization.</p>"},{"location":"developer_guide/#artifact-input-formats","title":"Artifact Input Formats","text":"<ul> <li>Glyphs as ID stream: <code>[1, 3, 5, 2, 4]</code></li> <li>Sectored format (dict): <code>{A1: [1,2], A2: [3,4,5], ...}</code></li> <li>Optional: glyph spatial metadata (sector ID, spiral pos, glyph-in-sector)</li> </ul>"},{"location":"developer_guide/#rebuilding-workflow","title":"Rebuilding Workflow","text":"<ol> <li>Create glyph \u2192 phase mapping</li> <li>Load artifact (glyph list or sector map)</li> <li>Encode full phase stream</li> <li>Extract features</li> <li>Classify: Type + Subtype</li> <li>Interpret: Segment + Ritual Role</li> <li>Export results</li> </ol> <p>This guide should enable any developer to rebuild the BRES pipeline or extend it into their own symbolic artifact decoding system.</p>"},{"location":"feature_extraction/","title":"Feature Extraction","text":""},{"location":"feature_extraction/#feature-extraction","title":"Feature Extraction","text":"<p>(Structural Metrics)</p> <p>Each artifact\u2019s phase sequence is processed into a feature vector via <code>extract_bres_features_extended()</code>. Features include: - Phase counts and proportions - Shannon entropy - Transition frequency matrix (e.g., A\u2192T, T\u2192P) - Key motif counts (e.g., PTAN, ATAAN) - Closure density - Spatial glyph metadata (for spiral or radial artifacts)</p>"},{"location":"interpretation/","title":"Interpretation","text":""},{"location":"interpretation/#interpretation-pipeline","title":"Interpretation Pipeline","text":"<p>(Post-Classification)</p> <p>Once classified, BRES proceeds to auto-interpret the artifact based on type:</p>"},{"location":"interpretation/#a-ritual-calendar","title":"A \u2013 Ritual Calendar","text":"<ul> <li>Segments by closure or motifs</li> <li>Maps phase structure to ceremonial function</li> <li>Outputs ritual season timeline + ceremonial script</li> </ul>"},{"location":"interpretation/#b-invocation-litany","title":"B \u2013 Invocation Litany","text":"<ul> <li>Detects repetitive invocations</li> <li>Builds call-and-response sequences</li> </ul>"},{"location":"interpretation/#c-astronomical-register","title":"C \u2013 Astronomical Register","text":"<ul> <li>Aligns phases with planetary visibility or eclipses</li> <li>Narrates ritual significance of celestial phenomena</li> </ul>"},{"location":"interpretation/#d-divinatory-cosmogram","title":"D \u2013 Divinatory Cosmogram","text":"<ul> <li>Analyzes sector oppositions and closures</li> <li>Interprets polarity structure and divinatory logic</li> </ul>"},{"location":"phase_assignment/","title":"Phase Assignment","text":""},{"location":"phase_assignment/#bres-phase-grammar","title":"BRES Phase Grammar","text":"Phase Symbol Ritual Function Passive P Grounding, purification, fertility Transitional T Threshold crossing, transformation Active A Invocation, offering, sacrifice Neutral N Closure, silence, sealing"},{"location":"phase_assignment/#glyph-to-phase-assignment","title":"Glyph-to-Phase Assignment","text":"<p>Assignments are based on: - Iconographic and mythological parallels - Phase motif clustering - Cross-cultural ritual role alignment</p>"},{"location":"phase_assignment/#probabilistic-assignments","title":"Probabilistic Assignments:","text":"<p>Glyphs may map to multiple phases with confidence levels (e.g., 01 \u2192 A: 0.8, T: 0.2). These are used for smoother, more nuanced classification.</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#references","title":"References","text":"<ul> <li>Evans, Arthur. Scripta Minoa (1909)</li> <li>Bricker, V., &amp; Bricker, H. (2011). Astronomy in the Maya Codices</li> <li>Dresden Codex scans: https://www.slub-dresden.de</li> <li>FAMSI: https://www.famsi.org</li> </ul> <p>Synthetic examples used are labeled within training datasets and marked explicitly during classification.</p> <p>Generated with assistance from ChatGPT-4.</p>"},{"location":"system_overview/","title":"System Overview","text":""},{"location":"system_overview/#system-overview","title":"System Overview","text":""},{"location":"system_overview/#binary-ritual-encoding-system-bres-expanded-technical-documentation-2025","title":"Binary Ritual Encoding System (BRES) \u2013 Expanded Technical Documentation (2025)","text":""},{"location":"system_overview/#overview","title":"Overview","text":"<p>The Binary Ritual Encoding System (BRES) is a symbolic classification and interpretation framework for decoding ritual logic embedded in ancient, non-linguistic artifacts such as the Phaistos Disc and the Dresden Codex. BRES identifies modular glyph sequences using a four-phase grammar\u2014Passive, Transitional, Active, Neutral (P, T, A, N)\u2014and classifies them as one of several ritual types. It now includes subtype analysis and a full interpretive ritual generation pipeline.</p>"}]}